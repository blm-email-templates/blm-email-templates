{"version":3,"sources":["Templates.js","App.js","serviceWorker.js","index.js"],"names":["templates","name","to","subject","body","App","useState","showInfoSetWindow","setShowInfoSetWindow","showAboutWindow","setShowAboutWindow","setName","nameInput","React","createRef","useEffect","document","title","ReactGA","initialize","Provider","value","size","className","Modal","show","onHide","animation","Header","closeButton","Title","Body","InputGroup","Prepend","Text","id","FormControl","aria-label","aria-describedby","ref","Footer","Button","variant","onClick","current","href","Navbar","bg","expand","style","display","Brand","marginLeft","padding","Card","ListGroup","map","template","Item","key","Container","fluid","Row","Col","height","justifyContent","float","target","replace","event","category","action","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.167ec0f2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst templates = [\n  {\n    name: \"Temp 1\",\n    to: \"blm-email-templates@protonmail.com\",\n    subject: \"Test1 bruh\",\n    body: \"Test1 body\"\n  },\n  {\n    name: \"Temp 2\",\n    to: \"blm-email-templates@protonmail.com\",\n    subject: \"Test2\",\n    body: \"Test2 body%0D%0A hmm%0D%0ARegards, [YOUR NAME]\"\n  },\n  {\n    name: \"Temp 3\",\n    to: \"blm-email-templates@protonmail.com\",\n    subject: \"Test3\",\n    body: \"Test2 body\"\n  },\n  {\n    name: \"Temp 4\",\n    to: \"blm-email-templates@protonmail.com\",\n    subject: \"Test4\",\n    body: \"Test4 body\"\n  },\n];\n\nexport default templates;","import React, {useEffect, useState} from 'react';\nimport ReactGA from \"react-ga\";\nimport { ListGroup, Card, Navbar, Button, InputGroup, Modal, FormControl, Container, Row, Col } from 'react-bootstrap';\nimport templates from './Templates.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { IconContext } from 'react-icons';\nimport { FaPaperPlane, FaQuestionCircle } from 'react-icons/fa';\n\n\nfunction App() {\n  const [showInfoSetWindow, setShowInfoSetWindow] = useState(false);\n  const [showAboutWindow, setShowAboutWindow] = useState(false);\n\n  const [name, setName] = useState(\"[YOUR NAME]\");\n\n  let nameInput = React.createRef();\n\n  useEffect(() => {\n    document.title = \"BLM Email Templates\";\n    ReactGA.initialize('UA-168786781-1');\n  }, []);\n\n  return (\n    <IconContext.Provider value={{ size:'1em' }} >\n    <div className=\"App\" >\n      <Modal size=\"sm\" show={showInfoSetWindow} onHide={() => setShowInfoSetWindow(false)} animation={true}>\n        <Modal.Header closeButton>\n          <Modal.Title>Set Personal Info</Modal.Title>\n        </Modal.Header>\n        \n        <Modal.Body>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroup-sizing-default\">Name</InputGroup.Text>\n            </InputGroup.Prepend>\n\n            <FormControl\n              aria-label=\"Default\"\n              aria-describedby=\"inputGroup-sizing-default\"\n              ref={nameInput}\n            />\n          </InputGroup>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={() => setShowInfoSetWindow(false)}>Close</Button>\n          <Button variant=\"primary\" onClick={() => {\n            setName(nameInput.current.value); \n            setShowInfoSetWindow(false);\n          }}>Save changes</Button>\n        </Modal.Footer>\n    </Modal>\n\n    <Modal size=\"lg\" show={showAboutWindow} onHide={() => setShowAboutWindow(false)} animation={true}>\n        <Modal.Header closeButton>\n          <Modal.Title>About</Modal.Title>\n        </Modal.Header>\n        \n        <Modal.Body>\n        This website is dedicated to making it as easy as possible to send emails to governmental institutions about changes they\n        should make with premade templates.<br/><br/>\n         Simply set your name, and click <FaPaperPlane /> to automatically compose an email with\n          the body already filled in. Now all you have to do is hit send!\n          \n          <br/><br/> Email <a href=\"mailto:blm-email-templates@protonmail.com\">blm-email-templates@protonmail.com</a> if you have any feedback or new templates!\n        </Modal.Body>\n    </Modal>\n\n\n      <Navbar bg=\"light\" expand=\"lg\" style={{ display: \"flex\" }}>\n        <Navbar.Brand href=\"#home\">Email Templates for Change</Navbar.Brand>\n        <div style={{ marginLeft: \"auto\" }}>\n        <Button variant=\"secondary\" onClick={() => setShowAboutWindow(true)}> <FaQuestionCircle /> </Button>&nbsp;\n        <Button variant=\"primary\" onClick={() => setShowInfoSetWindow(true)}>Set Name</Button>\n        </div>\n      </Navbar>\n\n      <div style={{padding: '15px 15px'}}>\n      <Card>\n        <Card.Header>Templates</Card.Header>\n        <ListGroup variant=\"flush\">\n        {\n          templates.map(template => {\n            return (\n              <ListGroup.Item key={template.name}>\n                <Container fluid>\n                  <Row>\n                    <Col style={{display:'flex', height: '100%', justifyContent: 'left'}}>\n                      {template.name}\n                    </Col>\n                    <Col>\n                      <Button style={{float:'right'}} variant=\"secondary\" target=\"_blank\" href={\n                        \"mailto:\" + template.to\n                        + \"?subject=\" + template.subject\n                        + \"&body=\" + template.body.replace(\"[YOUR NAME]\", name)} onClick={() => ReactGA.event({category: \"email\", action: \"sent:\", label: template.name})}><FaPaperPlane /></Button>\n                    </Col>\n                  </Row>\n                </Container>\n\n              </ListGroup.Item>\n            );\n          })\n        }\n        </ListGroup>\n      </Card>\n      </div>\n    </div>\n    </IconContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}